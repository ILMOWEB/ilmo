name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NAME: github_actions
      USER: postgres
      PASSWORD: postgres
      HOST: 127.0.0.1
      PORT: 5432
      LOCAL: True
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}

    # Service for Postgres DB
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # Install Poetry
      - name: Install Poetry
        run: pip3 install poetry

      # Install dependencies
      - name: Install dependencies
        run: poetry install

      # Install Playwright dependencies
      - name: Install Playwright dependencies
        run: poetry run python -m playwright install --with-deps

      # Run Migrations
      - name: Run migrations
        working-directory: ./app
        run: poetry run invoke migrate

      # Populate the Database
      - name: Populate the database
        working-directory: ./app
        run: poetry run python config/populate.py

      # Run unittests
      - name: Run unittests
        working-directory: ./app
        run: poetry run invoke unittest

      # Start Django
      - name: Start Django development server
        working-directory: ./app
        run: poetry run python manage.py runserver &

      # Playwright tests
      - name: Wait for Django server to start
        run: |
          while ! nc -z localhost 8000; do sleep 1; done
          sleep 5

      - name: Run Playwright tests
        working-directory: ./app
        run: poetry run xvfb-run pytest ilmoweb/tests/playwright/ --headed --base-url http://127.0.0.1:8000/

      - name: Stop Django development server
        run: pkill -f 'python manage.py runserver'

      # Run Pylint
      - name: Lint
        working-directory: ./app
        run: poetry run invoke lint

  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Build docker image and push it to Docker Hub
      - name: Build image
        run: docker build . -t ${{ secrets.DOCKER_HUB_USERNAME }}/ilmoweb:ilmo

      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ilmoweb:ilmo

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "production" ]
  pull_request:
    branches: [ "production" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NAME: github_actions
      USER: postgres
      PASSWORD: postgres
      HOST: 127.0.0.1
      PORT: 5432
      LOCAL: True
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}

    # Service for Postgres DB
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # Install Poetry
      - name: Install Poetry
        run: pip3 install poetry

      # Install dependencies
      - name: Install dependencies
        run: poetry install

      # Install Playwright dependencies
      - name: Install Playwright dependencies
        run: poetry run python -m playwright install --with-deps

      # Run Migrations
      - name: Run migrations
        working-directory: ./app
        run: poetry run invoke migrate

      # Populate the Database
      - name: Populate the database
        working-directory: ./app
        run: poetry run python config/populate.py

      # Run unittests
      - name: Run unittests
        working-directory: ./app
        run: poetry run invoke unittest

      # Start Django
      - name: Start Django development server
        working-directory: ./app
        run: poetry run python manage.py runserver &

      # Playwright tests
      - name: Wait for Django server to start
        run: |
          while ! nc -z localhost 8000; do sleep 1; done
          sleep 5

      - name: Run Playwright tests
        working-directory: ./app
        run: poetry run xvfb-run pytest ilmoweb/tests/playwright/ --headed --base-url http://127.0.0.1:8000/

      - name: Stop Django development server
        run: pkill -f 'python manage.py runserver'

      # Run Pylint
      - name: Lint
        working-directory: ./app
        run: poetry run invoke lint

  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Build docker image and push it to Docker Hub
      - name: Build image
        run: docker build . -t ${{ secrets.DOCKER_HUB_USERNAME }}/ilmoweb:prod

      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ilmoweb:prod